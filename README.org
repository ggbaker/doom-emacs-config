:DOC-CONFIG:
#+property: header-args :emacs-lisp :tangle config.el :results silent
#+startup: fold
:END:

#+title: Doom Emacs Configuration
#+author: Gary Baker
#+email: gary.baker@wisc.edu

This file contains my configuration for Doom Emacs. It will tangle into the required init.el, packages.el, and config.el.

Upon editing, simply run (in normal model, hit return):
#+begin_src emacs-lisp :tangle no
(org-babel-tangle)
(doom/reload)
#+end_src

NOTE: If you've compiled the commands with ~doom compile~, you'll need to run the following for config updates to take effect.
#+begin_src bash
~/.emacs.d/bin/doom clean
#+end_src

* Init setup
The following controls the enabled modules, their plugins, and the order in which they're loaded.
This is more or less the default file, with some small modifications.

Module documentation can be found in the Doom documentation (~SPC h d h~).
#+begin_src emacs-lisp :tangle init.el
;;; init.el -*- lexical-binding: t; -*-

(doom! :input
       ;;chinese
       ;;japanese
       ;;layout            ; auie,ctsrnm is the superior home row

       :completion
       company           ; the ultimate code completion backend
       (helm)               ; the *other* search engine for love and life
       ;;ido               ; the other *other* search engine...
       ;; ivy               ; a search engine for love and life

       :ui
       ;;deft              ; notational velocity for Emacs
       doom              ; what makes DOOM look the way it does
       doom-dashboard    ; a nifty splash screen for Emacs
       ;;doom-quit         ; DOOM quit-message prompts when you quit Emacs
       ;;(emoji +unicode)  ; ðŸ™‚
       ;;fill-column       ; a `fill-column' indicator
       hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       ;;hydra
       ;;indent-guides     ; highlighted indent columns
       (ligatures +extra)  ; ligatures and symbols to make your code pretty again
       ;;minimap           ; show a map of the code on the side
       modeline          ; snazzy, Atom-inspired modeline, plus API
       ;;nav-flash         ; blink cursor line after big motions
       neotree             ; a project drawer, like NERDTree for vim
       ophints           ; highlight the region an operation acts on
       (popup +defaults)   ; tame sudden yet inevitable temporary windows
       ;;tabs              ; a tab bar for Emacs
       ;;treemacs          ; a project drawer, like neotree but cooler
       ;;unicode           ; extended unicode support for various languages
       vc-gutter         ; vcs diff in the fringe
       vi-tilde-fringe   ; fringe tildes to mark beyond EOB
       ;;window-select     ; visually switch windows
       workspaces        ; tab emulation, persistence & separate workspaces
       zen               ; distraction-free coding or writing

       :editor
       (evil +everywhere); come to the dark side, we have cookies
       file-templates    ; auto-snippets for empty files
       fold              ; (nigh) universal code folding
       ;;(format +onsave)  ; automated prettiness
       ;;god               ; run Emacs commands without modifier keys
       ;;lispy             ; vim for lisp, for people who don't like vim
       ;;multiple-cursors  ; editing in many places at once
       ;;objed             ; text object editing for the innocent
       ;;parinfer          ; turn lisp into python, sort of
       ;;rotate-text       ; cycle region at point between text candidates
       snippets          ; my elves. They type so I don't have to
       ;;word-wrap         ; soft wrapping with language-aware indent

       :emacs
       dired             ; making dired pretty [functional]
       electric          ; smarter, keyword-based electric-indent
       ;;ibuffer         ; interactive buffer management
       (undo +tree)      ; persistent, smarter undo for your inevitable mistakes
       vc                ; version-control and Emacs, sitting in a tree

       :term
       ;;eshell            ; the elisp shell that works everywhere
       ;;shell             ; simple shell REPL for Emacs
       ;;term              ; basic terminal emulator for Emacs
       ;;vterm             ; the best terminal emulation in Emacs

       :checkers
       syntax              ; tasing you for every semicolon you forget
       (spell +flyspell) ; tasing you for misspelling mispelling
       ;;grammar           ; tasing grammar mistake every you make

       :tools
       ;;ansible
       debugger          ; FIXME stepping through code, to help you add bugs
       ;;direnv
       ;;docker
       ;;editorconfig      ; let someone else argue about tabs vs spaces
       ;;ein               ; tame Jupyter notebooks with emacs
       (eval +overlay)     ; run code, run (also, repls)
       gist              ; interacting with github gists
       lookup              ; navigate your code and its documentation
       lsp
       (magit +forge)             ; a git porcelain for Emacs
       ;;make              ; run make tasks from Emacs
       ;;pass              ; password manager for nerds
       pdf               ; pdf enhancements
       ;;prodigy           ; FIXME managing external services & code builders
       ;;rgb               ; creating color strings
       ;;taskrunner        ; taskrunner for all your projects
       ;;terraform         ; infrastructure as code
       ;;tmux              ; an API for interacting with tmux
       ;;upload            ; map local to remote projects via ssh/ftp

       :os
       (:if IS-MAC macos)  ; improve compatibility with macOS
       ;;tty               ; improve the terminal Emacs experience

       :lang
       ;;agda              ; types of types of types of types...
       ;;cc                ; C/C++/Obj-C madness
       ;;clojure           ; java with a lisp
       ;;common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       ;;csharp            ; unity, .NET, and mono shenanigans
       ;;data              ; config/data formats
       ;;(dart +flutter)   ; paint ui and not much else
       ;;elixir            ; erlang done right
       ;;elm               ; care for a cup of TEA?
       emacs-lisp        ; drown in parentheses
       ;;erlang            ; an elegant language for a more civilized age
       ;;ess               ; emacs speaks statistics
       ;;faust             ; dsp, but you get to keep your soul
       ;;fsharp            ; ML stands for Microsoft's Language
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
       ;;gdscript          ; the language you waited for
       ;;(go +lsp)         ; the hipster dialect
       ;;(haskell +dante)  ; a language that's lazier than I am
       ;;hy                ; readability of scheme w/ speed of python
       ;;idris             ; a language you can depend on
       ;;json              ; At least it ain't XML
       ;;(java +meghanada) ; the poster child for carpal tunnel syndrome
       ;;javascript        ; all(hope(abandon(ye(who(enter(here))))))
       julia             ; a better, faster MATLAB
       ;;kotlin            ; a better, slicker Java(Script)
       latex             ; writing papers in Emacs has never been so fun
       ;;lean
       ;;factor
       ;;ledger            ; an accounting system in Emacs
       ;;lua               ; one-based indices? one-based indices
       markdown          ; writing docs for people to ignore
       ;;nim               ; python + lisp at the speed of c
       ;;nix               ; I hereby declare "nix geht mehr!"
       ;;ocaml             ; an objective camel
       (org +jupyter +pretty +roam +pandoc +present)               ; organize your plain life in plain text
       ;;php               ; perl's insecure younger brother
       ;;plantuml          ; diagrams for confusing people more
       ;;purescript        ; javascript, but functional
       python            ; beautiful is better than ugly
       ;;qt                ; the 'cutest' gui framework ever
       ;;racket            ; a DSL for DSLs
       ;;raku              ; the artist formerly known as perl6
       ;;rest              ; Emacs as a REST client
       ;;rst               ; ReST in peace
       ;;(ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       ;;rust              ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;scala             ; java, but good
       ;;scheme            ; a fully conniving family of lisps
       sh                ; she sells {ba,z,fi}sh shells on the C xor
       ;;sml
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       ;;web               ; the tubes
       ;;yaml              ; JSON, but readable

       :email
       ;;(mu4e +gmail)
       ;;notmuch
       ;;(wanderlust +gmail)

       :app
       ;;calendar
       ;;emms
       ;;everywhere        ; *leave* Emacs!? You must be joking
       ;;irc               ; how neckbeards socialize
       ;;(rss +org)        ; emacs as an RSS reader
       ;;twitter           ; twitter client https://twitter.com/vnought

       :config
       ;;literate
       (default +bindings +smartparens))
#+end_src

* General configuration
** Todo [0/1]
- [ ] Push to git with gpg ssh key on yubikey doesn't work.

** Basic info
Set default user information:
#+begin_src emacs-lisp :tangle config.el
(setq user-full-name "Gary Baker"
      user-mail-address "gary.baker@wisc.edu")
#+end_src

** Theme and buffer appearance
Use the default doom theme and fonts
#+begin_src emacs-lisp :tangle config.el
(setq doom-theme 'doom-nord)
#+end_src

Use line numbering by default
#+begin_src emacs-lisp :tangle config.el
(setq display-line-numbers-type t)
#+end_src

I like to keep text columns to under 80 characters long. In code buffers, I use ~auto-fill~, and in prose buffers I use  ~visual-fill-column~. Set the max column width here. (~visual-fill-column~ uses the ~fill-column~ parameter by default, but for some reason seems to fill to 5 less. So I set the ~visual-fill-column-width~ parameter separately to correct for this.)
#+begin_src emacs-lisp :tangle config.el
(setq fill-column 79)
(setq visual-fill-column-width 85)
#+end_src

*** Dashboard
I prefer a slightly simpler splash banner on the dashboard. Redefine the function that draws new banner.
#+begin_src emacs-lisp :tangle config.el
(defun doom-dashboard-draw-ascii-banner-fn ()
  (let* ((banner
          '("     _/\\/\\/\\/\\/\\/\\____/\\/\\______/\\/\\________/\\/\\__________/\\/\\/\\/\\/\\______/\\/\\/\\/\\/\\_"
            "    _/\\______________/\\/\\/\\__/\\/\\/\\______/\\/\\/\\/\\______/\\/\\____________/\\/\\_________ "
            "   _/\\/\\/\\/\\/\\______/\\/\\/\\/\\/\\/\\/\\____/\\/\\____/\\/\\____/\\/\\______________/\\/\\/\\/\\___  "
            "  _/\\/\\____________/\\/\\__/\\__/\\/\\____/\\/\\/\\/\\/\\/\\____/\\/\\____________________/\\/\\_   "
            " _/\\/\\/\\/\\/\\/\\____/\\/\\______/\\/\\____/\\/\\____/\\/\\______/\\/\\/\\/\\/\\____/\\/\\/\\/\\/\\___    "
            "________________________________________________________________________________     "))
         (longest-line (apply #'max (mapcar #'length banner))))
    (put-text-property
     (point)
     (dolist (line banner (point))
       (insert (+doom-dashboard--center
                +doom-dashboard--width
                (concat
                 line (make-string (max 0 (- longest-line (length line)))
                                   32)))
               "\n"))
     'face 'doom-dashboard-banner)))
#+end_src

** Technical stuff
By default, emacs deletes files permanently. Use the system trash instead:
#+begin_src emacs-lisp :tangle config.el
(setq-default delete-by-moving-to-trash t)
#+end_src

** Global keybindings
*** Top level
I use undo-tree-visualize a lot. Rebind it to the main SPC menu:
#+begin_src emacs-lisp :tangle config.el
(map! :leader
      :desc "Undo tree" "U" #'undo-tree-visualize)
#+end_src

*** Code
Add a keybinding for commenting lines/regions
#+begin_src emacs-lisp :tangle config.el
(map! :leader
      (:prefix ("c" . "code")
      :desc "Comment line/region" ";" #'comment-line)
      )
#+end_src

*** Window navigation
Add a function and keybinding that both closes a window and kills the buffer it was displaying.
#+begin_src emacs-lisp :tangle config.el
(defun close-and-kill-this-pane ()
  "If there are multiple windows, then close this pane and kill the buffer in it also."
  (interactive)
  (kill-this-buffer)
  (if (not (one-window-p))
      (delete-window)))
(map! :leader
      (:prefix ("w" . "window")
       :desc "Close window and kill buffer" "D" #'close-and-kill-this-pane))
#+end_src

** Searching
I'm not fan of the Vim-style :%s find and replace. Map the default ~query-replace~ and ~query-replace-regexp~ to bindings under the "search" prefix.
#+begin_src emacs-lisp :tangle config.el
(map! :leader
      (:prefix ("s" . "search")
       :desc "Query replace" "r" #'query-replace
       :desc "Regexp query replace" "R" #'query-replace-regexp))
#+end_src

* Org setup
** Todo [1/4]
- [ ] Formatting commands
  - Bold, italic, underline
- [ ] Add new snippets
  - SRC block snippets for config
- [X] ~helm-bibtex~ insert citation does nothing in org. I thought it worked before, and I'm not sure what changed, but it works in LaTeX, so fixing it isn't high priority...
- [ ] Config for ~org-jupyter~
  - Not sure what is needed (if anything) until I try some old org files...

** Buffer appearance
Use visual-fill-column for org. This keeps text width more manageable without actually imposing line breaks.
#+begin_src emacs-lisp :tangle config.el
(add-hook! org-mode #'visual-fill-column-mode)
#+end_src

** General formatting
** Citation management
Let ~org-ref~ handle formatting citations.
#+begin_src emacs-lisp :tangle packages.el
(package! org-ref)
#+end_src

~org-ref~ will format citations, and link properly to the bib entry if it's pointed at the bib file and pdf directory.
#+begin_src emacs-lisp :tangle config.el
(use-package! org-ref
  :after helm-bibtex
  :custom
  (org-ref-default-bibliography '("~/Dropbox/Documents/working/library.bib"))
  (org-ref-pdf-directory "~/Dropbox/Documents/working/papers/")
  )
#+end_src

Use ~helm-bibtex~ for inserting citations. I don't quite get how the ~map!~ macro is supposed to work. For some reason, anything mapped under ~:leader~ seems to always map globally, ignoring the specified keymap. Using ~general~'s default binding command doesn't have this issue.
#+begin_src emacs-lisp :tangle config.el
(general-define-key
 :states '(normal insert)
 :keymaps 'org-mode-map
 :prefix "SPC"
 :non-normal-prefix "M-SPC"
 "]" 'helm-bibtex)
#+end_src

** Org-capture
Set the default org directory:
#+begin_src emacs-lisp :tangle config.el
(setq org-directory "~/Dropbox/Documents/working/org")
#+end_src

** Org-roam
I use org-roam for building a zettelkasten note-taking. First ensure the necessary packages are installed. NOTE: sql is required. Might need to install ~sqlite3~ with an ~apt get~.
#+begin_src emacs-lisp :tangle packages.el
;;(package! org-roam)
(package! org-roam-bibtex)  ;; Use org-roam for paper notes
#+end_src
Then configure things. The following block sets the default directory for roam notes and the default note style.
#+begin_src emacs-lisp :tangle config.el
(after! org-roam
  (setq org-roam-directory "~/Dropbox/Documents/working/roam/")
  (setq org-roam-capture-templates '(("d" "default" plain (function org-roam-capture--get-point) "%?" :file-name "${slug}" :head "#+title: ${title}\n" :unnarrowed t)))
)

(use-package! org-roam-bibtex
  :after org-roam
  :hook (org-roam-mode . org-roam-bibtex-mode)
  :custom
  (orb-templates
   '(("r" "ref" plain #'org-roam-capture--get-point "" :file-name "${citekey}" :head "#+title: ${title}\n#+roam_alias: ${citekey}\n#+roam_key: ${ref}\n"
      :unnarrowed t))))
#+end_src

Add some extra keybindings under the roam menu. In particular, the command to toggle the backlinks display, and the command to open the index file.
#+begin_src emacs-lisp :tangle config.el
(map! :leader
      (:prefix ("n" . "notes")
       (:prefix ("r" . "roam")
       :desc "Roam index" "RET" #'org-roam-jump-to-index
       :desc "Toggle Roam display" "'" #'org-roam-buffer-toggle-display))
      )
#+end_src

** Org-download
Org-download allows clipping screenshots and inserting into buffers (among other things). It could have been installed with the ~+dragndrop~ plugin for the ~org~ module, but that didn't work right for me. (screenshots didn't seem to work right.) Instead, just manually install and configure it.
#+begin_src emacs-lisp :tangle packages.el
(package! org-download)
#+end_src
#+begin_src emacs-lisp :tangle config.el
(use-package! org-download
  :after org
  :custom
  (org-download-image-dir "images")
  :config
  (map! :map org-mode-map
        :localleader
        (:prefix ("a" . "attachments")
         "c" #'org-download-screenshot))
  )
#+end_src

* LaTeX setup
** Todo [0/1]
- [ ] ~evil-surround~ (~S char~) adds extra spaces when insterting parentheses, brackets, or braces. I'm not a fan...
** Buffer appearance
As with org, use visual-fill-column for LaTeX to manage column widths without actually breaking lines.
#+begin_src emacs-lisp :tangle config.el
(add-hook! LaTeX-mode #'visual-fill-column-mode)
#+end_src

** Basic formatting
The LaTeX module seems a bit borked, and most of the default keybindings in ~evil-mode~ don't seem to work. This seems to be related to ~AUCteX~'s bizarre multiple mode aliases (e.g. ~LaTeX-mode~ vs. ~latex-mode~).

Here we'll recreate some commonly used formatting commands so as to avoid uncomfortable combos like ~C-c C-f C-i~.

First define the necessary functions for the keybindings.
#+BEGIN_SRC emacs-lisp :tangle config.el
(defun TeX-italic()
  (interactive)
  (TeX-font nil ?\C-i))

(defun TeX-typewriter()
  (interactive)
  (TeX-font nil ?\C-t))

(defun TeX-bold()
  (interactive)
  (TeX-font nil ?\C-b))

(defun TeX-smallcaps()
  (interactive)
  (TeX-font nil ?\C-c))
#+END_SRC
Now map those under a font prefix. This is where we run into the issue with ~AUCTeX~'s weird mode names bizarre multiple mode aliases (e.g. ~LaTeX-mode~ vs. ~latex-mode~). For example, keybindings mapped to the ~latex-mode-map~ don't seem to end up properly mapped for some reason, but their descriptions for ~which-key~ are stored properly. Conversely, commands mapped to ~LaTeX-mode-map~ get mapped correctly, but the descriptions don't work. BUT, if the command is mapped to both, everything seems to work... See [[https://github.com/hlissner/doom-emacs/issues/4288#issue-746460181][this issue]] for more information.
#+begin_src emacs-lisp :tangle config.el
(map! :map latex-mode-map
      ;; :leader
      :localleader
      (:prefix ("f" . "Font faces")
      :desc "Italic" "i" #'TeX-italic
      :desc "Monospace" "t" #'TeX-typewriter
      :desc "Bold" "b" #'TeX-bold
      :desc "Smallcaps" "c" #'TeX-smallcaps))
(map! :map LaTeX-mode-map
      ;; :leader
      :localleader
      (:prefix ("f" . "Font faces")
      :desc "Italic" "i" #'TeX-italic
      :desc "Monospace" "t" #'TeX-typewriter
      :desc "Bold" "b" #'TeX-bold
      :desc "Smallcaps" "c" #'TeX-smallcaps))
#+end_src

** Environments
Define some keybindings for inserting and changing environments. (This stuff I think should be handled by ~evil-tex~, but that package seems to do nothing right now...)

First define a function that changes the current LaTeX environment by calling
the ~LaTeX-environment~ command with the universal argument.

#+begin_src emacs-lisp :tangle config.el
(defun LaTeX-change-environment ()
  (interactive)
  (LaTeX-environment 1))
#+end_src

Now map that command, along with the default environment command.
#+begin_src emacs-lisp :tangle config.el
(map! :map latex-mode-map
      :localleader
      (:prefix ("e" . "Environments")
       :desc "Insert environment" "e" #'LaTeX-environment
       :desc "Change environment" "u" #'LaTeX-change-environment
       :desc "Toggle starred environment" "*" #'evil-tex-toggle-env))
(map! :map LaTeX-mode-map
      :localleader
      (:prefix ("e" . "Environments")
       :desc "Insert environment" "e" #'LaTeX-environment
       :desc "Change environment" "u" #'LaTeX-change-environment
       :desc "Toggle starred environment" "*" #'evil-tex-toggle-env))
#+end_src

** Compiling and viewing
I use the XeTeX engine by default for compiling. Set it as such:
#+begin_src emacs-lisp :tangle config.el
(setq-default TeX-engine 'xetex)
#+end_src

Map the compile and view commands under the top level local leader. (For some reason, descriptions do nothing. The view command has a description that is defined in the ~LaTeX~ module, though that keybinding doesn't appear unless defined here too. Keymapping in general seems borked.)
#+begin_src emacs-lisp :tangle config.el
(map! :map latex-mode-map
      :localleader
      :desc "Compile" "c" #'TeX-command-run-all
      :desc "Compile command" "C" #'TeX-command-master
      :desc "View" "v" #'TeX-view
      :desc "Next error" "'" #'TeX-next-error
      :desc "Show log" "l" #'TeX-recenter-output-buffer
      )
(map! :map LaTeX-mode-map
      :localleader
      :desc "Compile" "c" #'TeX-command-run-all
      :desc "Compile" "C" #'TeX-command-master
      :desc "View" "v" #'TeX-view
      :desc "Next error" "'" #'TeX-next-error
      :desc "Show log" "l" #'TeX-recenter-output-buffer
      )
#+end_src

By default, ~TeX-command-run-all~ will open the pdf after compiling. In the terminal, this just opens a window with gibberish raw pdf. To stop this, I define a new option in the ~TeX-command-list~ that does nothing but print that the compilation is finished. I then set ~TeX-command-Show~---the option to run when AUCTeX thinks the pdf is ready---to this dummy option. I'm happy to call the view command manually when I need it.
#+begin_src emacs-lisp :tangle config.el
;; First create a command that does nothing in the LaTeX command list
(after! latex
  ;; Function to display a message when compilation is done
  (defun TeX-view-message (a b c)
    (message "Compilation finished"))
  (setq TeX-command-list (append TeX-command-list
                                 '(("Do nothing" "" TeX-view-message))))
  )
;; The following needs to be set separately for some reason
;; I assume this again has something to do with the many mode names of AUCTeX
(add-hook! 'LaTeX-mode-hook
  (setq TeX-command-Show "Do nothing")
  )
#+end_src

** PDF viewer
By default, the view command uses one of a few different options for pdf viewers. I want it to default to pdf-tools within emacs.
#+begin_src emacs-lisp :tangle config.el
(setq +latex-viewers '(pdf-tools))
#+end_src

** Citation management
Just as with ~org-mode~, we'll use ~helm-bibtex~ for inserting citations
#+begin_src emacs-lisp :tangle config.el
(general-define-key
 :states '(normal insert)
 :keymaps 'LaTeX-mode-map
 :prefix "SPC"
 :non-normal-prefix "M-SPC"
 "]" 'helm-bibtex)
#+end_src

* Citation management
I use helm-bibtex for searching through a bib file, inserting citations, and (with org-roam) taking notes on papers. (helm-bibtex could have been installed with the ~biblio~ module in the ~init.el~ file, but it's just easier for me to set my own defaults.)

First make sure helm-bibtex is installed
#+begin_src emacs-lisp :tangle packages.el
(package! helm-bibtex)
#+end_src

Then configure it:
#+begin_src emacs-lisp :tangle config.el
(use-package! helm-bibtex
  :defer t
  :custom
  (bibtex-completion-bibliography
        '("~/Dropbox/Documents/working/library.bib"))
  (bibtex-completion-library-path
   '("~/Dropbox/Documents/working/papers"))
  )
#+end_src

* PDF viewing
For some reason some of the keybindings for ~pdf-tools~ get overloaded. I assume there's some issue with evil loading after pdf-tools and overloading the ~s~ prefix that ~pdf-tools~ uses for the various slicing commands for the usual evil snipe command. The only slice command I ever use is ~pdf-view-set-slice-from-bounding-box~ to cut margins off the document, so just bind that to something...
#+begin_src emacs-lisp :tangle config.el
(map! :map pdf-view-mode-map
      :leader
      :localleader
      "s" #'pdf-view-set-slice-from-bounding-box)
#+end_src

On first install or rebuild, run the ~pdf-tools-install~ command.
